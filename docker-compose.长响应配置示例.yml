version: '3'

services:
  one-api:
    image: one-api:latest
    container_name: one-api
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./data:/data
    environment:
      # ==========================================
      # 针对长响应场景的超时配置
      # ==========================================
      
      # 请求超时时间（秒）
      # 默认：900秒（15分钟），适配最长10分钟的响应
      # 如果你的场景通常在8分钟内完成，可以改为 600（10分钟）
      # 如果需要更长，可以改为 1200（20分钟）
      - RELAY_TIMEOUT=900
      
      # ==========================================
      # 其他常用配置
      # ==========================================
      
      # 数据库配置（如果使用外部数据库）
      # - SQL_DSN=root:password@tcp(mysql:3306)/oneapi?charset=utf8mb4&parseTime=True&loc=Local
      
      # Redis配置（如果需要）
      # - REDIS_CONN_STRING=redis://redis:6379
      
      # 日志级别
      - LOG_LEVEL=info
      
      # 是否开启调试模式
      - DEBUG=false
      
      # 会话密钥（用于加密session）
      - SESSION_SECRET=random_string_here
      
      # ==========================================
      # 性能优化配置
      # ==========================================
      
      # 自动重试次数（默认3次）
      - RETRY_TIMES=3
      
      # 是否启用自动禁用渠道（默认true）
      - AUTOMATIC_DISABLE_CHANNEL=true
      
      # 是否启用自动启用渠道（默认false）
      - AUTOMATIC_ENABLE_CHANNEL=false
    
    # ==========================================
    # 资源限制（防止OOM）
    # ==========================================
    mem_limit: 4g          # 最大内存限制
    memswap_limit: 4g      # 内存+交换空间限制
    cpus: "2.0"            # CPU限制
    
    # ==========================================
    # 健康检查
    # ==========================================
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ==========================================
# 注意事项
# ==========================================
# 
# 1. 超时配置说明：
#    - RELAY_TIMEOUT 只控制总超时时间
#    - 连接建立超时固定为10秒（快速失败）
#    - 适配10分钟响应 → 设置 900（15分钟，留缓冲）
#    - 适配5分钟响应 → 设置 420（7分钟）
#    - 适配1分钟响应 → 设置 120（2分钟）
#
# 2. 内存限制建议：
#    - 轻度使用：2GB
#    - 中度使用：4GB
#    - 重度使用：8GB
#
# 3. 监控建议：
#    - 使用 docker stats 监控资源使用
#    - 使用 docker logs -f 查看日志
#    - 定期检查 goroutine 数量
#
# 4. 如果遇到超时：
#    - 检查上游API是否正常
#    - 检查网络连接
#    - 考虑增加 RELAY_TIMEOUT
#    - 考虑使用异步模式（任务ID轮询）

